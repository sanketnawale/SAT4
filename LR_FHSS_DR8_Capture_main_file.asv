clear all; close all; clc;

%% 🌍 Simulation Parameters
tic
clear all; close all; clc;
Simulation_T = 110 * 60;  % Total simulation time (110 minutes in seconds)
Time_Step = 60;           % Time step (1 min = 60 sec)
MonteCarlo = 5000;        % Monte Carlo simulation (number of packets per node)
Nodes = 3;                % Number of ground nodes (Rome, Milan, NodeRM)
Pkct_Per_Hour = 100;      % Packets per hour for each node

%% 🌍 Ground Nodes (Rome, Milan, NodeRM)
Node_Coordinates = [ 
    41.9028, 12.4964;  % Rome (Node 1)
    45.4642, 9.1900;   % Milan (Node 2)
    41.9, 12.5         % NodeRM (Node 3, near Rome)
];




%% 🛰️ Satellite Constellation (Walker)
Sat_Per_Plane = 36;              % Satellites per plane
Num_Planes = 6;                 % Number of plan
Total_Sats = Sat_Per_Plane * Num_Planes;  % Total number of satellites in constellation
Orbital_Inclination = deg2rad(60);  % Inclination in radians
H = 1200e3;                    % Satellite altitude (meters)
Earth_Radius = 6378e3;           % Earth radius (meters)
Time_Vector = 0:Time_Step:Simulation_T;  % Simulation time vector


% 🛰️ Generate Walker Delta Constellation
oev = walker_delta(Sat_Per_Plane, Num_Planes, 1, pi, Earth_Radius + H, Orbital_Inclination);
Num_Satellites = size(oev, 1);
num_steps = length(Time_Vector);

%% 📡 Obtain Satellite Geometry
[Distances, Elevation_Angles, Ground_Distances, Visibility, Num_Visible_Sats, Sat_IDs, Latitudes, Longitudes] = ...
    Satellite_Geometry(H, Node_Coordinates, oev, Earth_Radius, Time_Vector);
%% 🌍 LR-FHSS Communication Parameters
%% 🌍 LR-FHSS Communication Parameters (Based on IEEE Paper)
Payload = 10;            % Message payload (bytes)
Header_N_DR8 = 3;        % Number of header replicas
Code_Rate = 1/3;         % Code rate (1/3)
Header_duration = 0.233; % 233 ms long headers
F_duration = 0.05;       % 50 ms payload data fragments
Header_ToA_DR8 = Header_N_DR8 * Header_duration;

% Time on Air (ToA) Calculation
[ToA_DR8, ToA_DR8_WH] = ToA_Packets_DR8(Payload, Header_ToA_DR8, 2); 
ToA_DR8(1) = ToA_DR8(1) + (6.472 / 1000);  % Add transceiver wait time

% Fragmentation Details
fragment_duration = 50 / 1000; % 50ms fragments
fragment_50_ms = floor(ToA_DR8_WH(1) / fragment_duration);
Last_fragment_duration = ((ToA_DR8_WH(1) / fragment_duration) - fragment_50_ms) * fragment_duration;
fragment_PHY_length = fragment_50_ms + 1;
fragment_length = Header_N_DR8 + 1 + fragment_PHY_length;  % +1 for Twait

% Define Monte Carlo Simulations
MonteCarlo = 1000;
OBW_channels = 280;  % Number of OBW channels
Collision_Threshold = 2 * 50e-3;  % 2 * 50ms fragment duration
% **🚀 Define Link Budget Parameters**
Tx_Power = 14;  % Transmit power in dBm (LoRa device typical Tx power)
Antenna_Gain = 2;  % Antenna gain in dB
Noise_Floor = -174 + 10 * log10(137e6);  % Noise floor in dBm for given bandwidth



%% 📊 Initialize Satellite Visibility Matrix
% Columns: [Time (min), Rome Visible Sats, Milan Visible Sats, NodeRM Visible Sats]
Visible_Sat_Matrix = zeros(length(Time_Vector), 4);

%% Additional storage for packet reception times info
% (For Rome and Milan, we build a string for each time step indicating
% the packet arrival (reception) times per visible satellite.
% For NodeRM, we store a simple message.)
Rome_PktReception = cell(length(Time_Vector), 1);
Milan_PktReception = cell(length(Time_Vector), 1);
NodeRM_PktReception = cell(length(Time_Vector), 1);

%% 📡 Random Access Logic for Packet Transmission, Reception & Collision Detection

% Initialize Success Rates and Collisions (for transmitting nodes)
SuccessRate = zeros(Nodes, length(Time_Vector));  % Success rate per node per time step
Collisions = zeros(Nodes, length(Time_Vector));     % Collision counts per node per time step

% Initialize Received Packets for NodeRM (relay node)
Received_Packets_NodeRM = zeros(1, length(Time_Vector));
num_nodes = size(Node_Coordinates, 1);  % Define number of ground nodes
Signal_Delay = zeros(num_nodes, Num_Satellites, num_steps);  % Initialize delay matrix


% Simulation loop over time steps
for t = 1:length(Time_Vector)
    current_time_min = Time_Vector(t) / 60;
    fprintf('\n⏳ Time %.2f min: \n', current_time_min);
    % ✅ Initialize Collision Tracking Variables
    target_collided = zeros(1, fragment_length);  % Collision counter for Desired signal
    target_discarded = zeros(1, fragment_length); % Discard counter due to capture effect
    F_success = 0;   % Successful fragments
    H_success = 0;   % Successful headers
    decoded = 0;     % Decoded packets


    for n = 1:Nodes-1
        if Num_Visible_Sats(n, t) == 0
            continue;
        end

        Num_Packets = 10;
        lambda = 1 / (60 / Pkct_Per_Hour);
        Inter_Arrival_Times = exprnd(1/lambda, 1, Num_Packets);
        Tx_Timestamps = cumsum(Inter_Arrival_Times);
        Tx_Timestamps(Tx_Timestamps > 60) = [];

        Visible_Sats = Sat_IDs{n, t};
        Sat_Receive_Times = cell(Total_Sats, 1);

        for pkt = 1:length(Tx_Timestamps)
            for chosen_sat = Visible_Sats
                arrival_time = Tx_Timestamps(pkt) + Signal_Delay(n, chosen_sat, t);
                Sat_Receive_Times{chosen_sat} = [Sat_Receive_Times{chosen_sat}, arrival_time];
            end
        end

        % 🚀 Segmentation: Assign time slots to different fragments
        pack_tx_segments = zeros(length(Tx_Timestamps), fragment_length);
        
        for pack = 1:length(Tx_Timestamps)
            for frag = 1:fragment_length
                if frag == 1
                    pack_tx_segments(pack, frag) = Tx_Timestamps(pack);
                elseif frag > 1 && frag <= (Header_N_DR8 + 1)
                    pack_tx_segments(pack, frag) = pack_tx_segments(pack, frag-1) + Header_duration;
                elseif frag == (Header_N_DR8 + 2)
                    pack_tx_segments(pack, frag) = pack_tx_segments(pack, frag-1) + (6.472 / 1000); % Twait
                else
                    pack_tx_segments(pack, frag) = pack_tx_segments(pack, frag-1) + fragment_duration;
                end
            end
        end


    % 🚀 **Collision Detection & Rician Fading**
            % 🚀 Collision Analysis
        for s = Visible_Sats
            if ~isempty(Sat_Receive_Times{s})
                sat_arrival_times = sort(Sat_Receive_Times{s});
                collisions = sum(diff(sat_arrival_times) < Collision_Threshold);
                total_packets = length(sat_arrival_times);

                % 📡 Compute SNR & Decoding
                SNR = Tx_Power + Antenna_Gain - Noise_Floor - (20*log10(Distances(n, s, t)/1e3));
                K_factor = 5;  
                sigma = sqrt(SNR / (2 * (K_factor + 1))); 
                Fading_SNR = SNR + sigma * randn; % Simulated Rician fading
                Decoding_Threshold = -6;  

                if Fading_SNR > Decoding_Threshold
                    SuccessRate(n, t) = total_packets - collisions;
                else
                    Collisions(n, t) = collisions;
                end
            end
        end

    
        % 📡 Frequency Hopping for Each Fragment
        % ✅ Initialize pack_tx_segments
        
        pack_tx_segments = zeros(Num_Packets, fragment_length);

        target_pattern = zeros(1, size(pack_tx_segments, 2));
        target_pattern(1) = randi(OBW_channels, 1, 1); 

        for assign = 2:size(pack_tx_segments, 2)
            if (assign == Header_N_DR8 + 1)
                target_pattern(assign) = 0; % No channel assigned during Twait
            else
                target_pattern(assign) = randi(OBW_channels, 1, 1);
                while abs(target_pattern(assign) - target_pattern(assign-1)) < 8
                    target_pattern(assign) = randi(OBW_channels, 1, 1);
                end
            end
        end
    end

                % 📡 Decoding Process
        Success_header = Header_N_DR8 - length(nonzeros(target_collided(1:Header_N_DR8)));
        Threshold = fragment_length - round(fragment_PHY_length * (1 - Code_Rate)) - Header_N_DR8 - 1;
        Success_fragment = fragment_length - length(nonzeros(target_collided((Header_N_DR8 + 2):end))) - Header_N_DR8 - 1;

        if Success_fragment >= Threshold
            F_success = F_success + 1;
        end

        if Success_header >= 1
            H_success = H_success + 1;
            if Success_fragment >= Threshold
                decoded = decoded + 1;
            end
        end

%% 🚀 **NodeRM Reception Logic**
if ~isempty(NodeRM_Packet_Times)
    NodeRM_Packet_Times = sort(NodeRM_Packet_Times);
    NodeRM_Visible_Sats = Sat_IDs{3, t};  
    if ~isempty(intersect(NodeRM_Visible_Sats, Sat_IDs{1, t}))
        Received_Packets_NodeRM(t) = 1;
    end
end
end

%% Display the Visibility Matrix table
disp(array2table(Visible_Sat_Matrix, 'VariableNames', {'Time_Min','Rome_Sats','Milan_Sats','NodeRM_Sats'}));

%% Build a detailed table containing visible satellite IDs and packet reception times
Time_Min = round((Time_Vector)' / 60, 1);

% Convert the raw Sat_IDs cells into readable strings
Rome_Sat_IDs_str = cellfun(@(x) mat2str(x), Sat_IDs(1,:)', 'UniformOutput', false);
Milan_Sat_IDs_str = cellfun(@(x) mat2str(x), Sat_IDs(2,:)', 'UniformOutput', false);
NodeRM_Sat_IDs_str = cellfun(@(x) mat2str(x), Sat_IDs(3,:)', 'UniformOutput', false);

DetailedTable = table(Time_Min, Rome_Sat_IDs_str, Milan_Sat_IDs_str, NodeRM_Sat_IDs_str, ...
    Rome_PktReception, Milan_PktReception, NodeRM_PktReception, ...
    'VariableNames', {'Time_Min','Rome_Sat_IDs','Milan_Sat_IDs','NodeRM_Sat_IDs', ...
    'Rome_PktReception','Milan_PktReception','NodeRM_PktReception'});
disp(DetailedTable);

%% Save DetailedTable to Excel with a specified path
% Specify the folder path (change this to your desired folder)
folderPath = 'D:\thesis\walker\Analysis-and-Simulation-of-LoRaWAN-LR-FHSS-main (1)\Analysis-and-Simulation-of-LoRaWAN-LR-FHSS-main';
if ~exist(folderPath, 'dir')
    mkdir(folderPath);
end
filename = fullfile(folderPath, 'DetailedResults.xlsx');
writetable(DetailedTable, filename, 'Sheet', 'DetailedResults');
fprintf('Detailed results saved to: %s\n', filename);

%% 📊 Final Summary and Graphs
fprintf('\n==== Final Results ====\n');
fprintf('✅ Overall Success Rate for Rome: %.2f%%\n', mean(SuccessRate(1, :)) / Num_Packets * 100);
fprintf('✅ Overall Success Rate for Milan: %.2f%%\n', mean(SuccessRate(2, :)) / Num_Packets * 100);
fprintf('📡 Total Packets Successfully Received by NodeRM: %d\n', sum(Received_Packets_NodeRM));
toc;

%% GRAPH PLOTTING

% Create a common time axis (in minutes)
time_minutes = Visible_Sat_Matrix(:, 1);

% Graph 1: Collisions Over Time for Rome (Node 1) and Milan (Node 2)
figure;
plot(time_minutes, Collisions(1, :), 'r-o', 'LineWidth', 1.5, 'MarkerSize', 8); hold on;
plot(time_minutes, Collisions(2, :), 'b-o', 'LineWidth', 1.5, 'MarkerSize', 8);
xlabel('Time (min)'); ylabel('Number of Collisions');
title('Collisions over Time for Rome and Milan');
legend('Rome (Node 1)', 'Milan (Node 2)'); grid on;


% Graph 2: Successful Transmissions Over Time for Rome and Milan
figure;
plot(time_minutes, SuccessRate(1, :), 'r-o', 'LineWidth', 1.5, 'MarkerSize', 8); hold on;
plot(time_minutes, SuccessRate(2, :), 'b-o', 'LineWidth', 1.5, 'MarkerSize', 8);
xlabel('Time (min)'); ylabel('Successful Transmissions');
title('Successful Transmissions over Time for Rome and Milan');
legend('Rome (Node 1)', 'Milan (Node 2)'); grid on;

% Graph 3: NodeRM Packet Reception over Time
figure;
stem(time_minutes, Received_Packets_NodeRM, 'g', 'LineWidth', 1.5, 'Marker', 'o');
xlabel('Time (min)'); ylabel('NodeRM Reception (1 = Received)');
title('NodeRM Packet Reception over Time'); grid on;



% ✅ Check if Latitudes and Longitudes exist before plotting
if exist('Latitudes', 'var') && exist('Longitudes', 'var')
    figure;
    hold on;
    grid on;
    
    % 🌍 **Plot Ground Stations**
    scatter(Node_Coordinates(:, 2), Node_Coordinates(:, 1), 100, 'ro', 'filled');  % Red markers for nodes
    text(Node_Coordinates(:, 2) + 1, Node_Coordinates(:, 1), {'Rome', 'Milan', 'NodeRM'}, 'FontSize', 12);

    xlabel('Longitude (°)');
    ylabel('Latitude (°)');
    title('2D Animated Ground Tracks of Satellites');
    xlim([-180, 180]);
    ylim([-90, 90]);

    % 🌟 **Initialize Satellite Plot Objects**
    sat_plots = gobjects(Num_Satellites, 1);
    ground_tracks = gobjects(Num_Satellites, 1);

    for s = 1:Num_Satellites
        % **Plot empty ground track (will update over time)**
        ground_tracks(s) = plot(Longitudes(s, 1), Latitudes(s, 1), 'b--', 'LineWidth', 1); % Dashed line for ground track
        sat_plots(s) = plot(Longitudes(s, 1), Latitudes(s, 1), 'bo', 'MarkerSize', 8, 'MarkerFaceColor', 'b'); % Blue circles for satellites
    end

    % 🛰️ **Animate the Satellite Movement**
    for t = 1:num_steps
        for s = 1:Num_Satellites
            % Update satellite positions in the plot
            set(sat_plots(s), 'XData', Longitudes(s, t), 'YData', Latitudes(s, t));

            % **Update ground track by plotting past positions**
            set(ground_tracks(s), 'XData', Longitudes(s, 1:t), 'YData', Latitudes(s, 1:t));
        end

        % 📌 **Update Plot Title with Time**
        title(sprintf('2D Animated Ground Tracks of Satellites (Time: %.2f min)', Time_Vector(t) / 60));

        pause(0.1);  % Small pause for animation effect
    end

    hold off;
else
    fprintf('⚠️ Warning: Latitudes and Longitudes are not available for plotting.\n');
end